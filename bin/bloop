#!/usr/bin/env node

var fs = require('fs');
var util = require('util');

var bloop = require('../index');
var helpers = require('../helpers');
var verifier = require('../verifier');

var argv = new helpers.Argv({
    usage: 'bloop [options]',
    options: [{
        names: ['c'],
        property: 'infile',
        helpText: 'The file to compile',
        required: true
    }, {
        names: ['o'],
        property: 'outfile',
        helpText: 'The result file from a compile operation'
    }, {
        names: ['m'],
        property: 'mangle',
        helpText: 'Whether to mangle the javascript ast before code generation'
    }, {
        names: ['O'],
        property: 'optimize',
        helpText: 'Whether to optimize the javascript ast before code generation'
    }, {
        names: ['T', 'show-type-info'],
        property: 'showTypeInfo',
        helpText: 'Print the type analysis and exit'
    }, {
        names: ['J', 'show-js-ast'],
        property: 'showJsAst',
        helpText: 'Print the resulting js ast and exit'
    }, {
        names: ['B', 'show-bloop-ast'],
        property: 'showBloopAst',
        helpText: 'Print the parsed bloop ast and exit'
    }, {
        names: ['D', 'show-bloop-ast-desugared'],
        property: 'showBloopAstDesugared',
        helpText: 'Print the parsed and desugared bloop ast and exit'
    }]
});

argv.parse(process.argv);

var showBloopAst = function (data, desugar) {
    var parsed = bloop.parser.parse(data);
    if (desugar) {
        verifier.desugar(parsed);
    }
    helpers.log(parsed);
    process.exit();
};

fs.readFile(argv.infile, 'utf8', function (err, data) {
    if (err) {
        throw err;
    }

    if (argv.showBloopAst || argv.showBloopAstDesugared) {
        showBloopAst(data, argv.showBloopAstDesugared);
    }

    var compiler = bloop.getCompiler(data);
    if (argv.showTypeInfo) {
        compiler.analyseTypes();
        var context = compiler.typeSystem.context.last();
        for (var prop in context) {
            console.log(prop + ': ' + context[prop]);
        }
        process.exit();
    }

    var result = bloop.compile(compiler, {
        optimize: argv.optimize,
        mangle: argv.mangle,
        getAst: argv.showJsAst
    });

    if (argv.showJsAst) {
        helpers.log(result);
        process.exit();
    }

    if (argv.outfile) {
        fs.writeFile(argv.outfile, result, function (err) {
            if (err) { throw err; }
        });
    } else {
        console.log(result);
    }
});

// vim: ts=4 sts=4 sw=4 et
