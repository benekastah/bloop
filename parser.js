/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"statement_list":4,"EOF":5,"NEWLINE":6,"statement":7,"definition":8,"type_annotation":9,"expr_list":10,"expr":11,"simple_expr_list":12,"simple_expr":13,"application":14,"literal":15,"(":16,")":17,"bin_op":18,"number":19,"symbol":20,"definable":21,"+":22,"-":23,"/":24,"*":25,"`":26,"DOUBLE_COLON":27,"type":28,"function_type":29,"simple_type":30,"type_symbol":31,"R_ARROW":32,"=":33,"literal_list":34,"indent":35,"dedent":36,"SYMBOL":37,"TYPE_SYMBOL":38,"fixnum":39,"float":40,"FIXNUM":41,"FLOAT":42,"INDENT":43,"DEDENT":44,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"NEWLINE",16:"(",17:")",22:"+",23:"-",24:"/",25:"*",26:"`",27:"DOUBLE_COLON",32:"R_ARROW",33:"=",37:"SYMBOL",38:"TYPE_SYMBOL",41:"FIXNUM",42:"FLOAT",43:"INDENT",44:"DEDENT"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[7,1],[7,1],[10,2],[10,1],[12,2],[12,1],[11,1],[11,1],[13,1],[13,3],[13,3],[15,1],[15,1],[21,1],[21,3],[18,1],[18,1],[18,1],[18,1],[18,3],[9,4],[9,6],[28,1],[28,1],[30,1],[30,3],[29,3],[14,2],[14,3],[8,4],[8,5],[8,6],[34,2],[34,1],[20,1],[31,1],[19,1],[19,1],[39,1],[40,1],[35,2],[36,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return yy.Module($$[$0-1]); 
break;
case 3: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: this.$ = [$$[$0]]; 
break;
case 7: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 8: this.$ = [$$[$0]]; 
break;
case 9: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 10:this.$ = [$$[$0]];
break;
case 14:this.$ = $$[$0-1];
break;
case 15:this.$ = $$[$0-1];
break;
case 19:this.$ = $$[$0-1];
break;
case 20: this.$ = yy.Symbol($$[$0]); 
break;
case 21: this.$ = yy.Symbol($$[$0]); 
break;
case 22: this.$ = yy.Symbol($$[$0]); 
break;
case 23: this.$ = yy.Symbol($$[$0]); 
break;
case 24:this.$ = $$[$0-1];
break;
case 25: this.$ = yy.TypeAnnotation($$[$0-3], $$[$0-1]); 
break;
case 26: this.$ = yy.TypeAnnotation($$[$0-4], $$[$0-1]); 
break;
case 30:this.$ = $$[$0-1];
break;
case 31: this.$ = yy.FunctionType($$[$0-2], $$[$0]); 
break;
case 32: this.$ = yy.makeApplication($$[$0-1], $$[$0]); 
break;
case 33: this.$ = yy.makeApplication($$[$0-1], [$$[$0-2], $$[$0]]); 
break;
case 34: this.$ = yy.VarDef($$[$0-3], $$[$0-1]); 
break;
case 35: this.$ = yy.VarDef($$[$0-4], yy.makeFunction($$[$0-3], $$[$0-1])); 
break;
case 36: this.$ = yy.VarDef($$[$0-5], yy.makeFunction($$[$0-4], $$[$0-1])); 
break;
case 37: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 38:this.$ = [$$[$0]];
break;
case 39: this.$ = yy.Symbol(yytext); 
break;
case 40: this.$ = yy.TypeSymbol(yytext); 
break;
case 43: this.$ = yy.Integer(yytext); 
break;
case 44: this.$ = yy.Float(yytext); 
break;
}
},
table: [{3:1,4:2,6:[1,3],7:4,8:5,9:6,16:[1,9],20:7,21:8,37:[1,10]},{1:[3]},{5:[1,11],7:12,8:5,9:6,16:[1,9],20:7,21:8,37:[1,10]},{3:13,4:2,6:[1,3],7:4,8:5,9:6,16:[1,9],20:7,21:8,37:[1,10]},{5:[2,4],16:[2,4],37:[2,4]},{5:[2,5],16:[2,5],37:[2,5]},{5:[2,6],16:[2,6],37:[2,6]},{27:[1,15],33:[1,14],37:[2,18],41:[2,18],42:[2,18]},{15:17,19:18,20:19,34:16,37:[1,10],39:20,40:21,41:[1,22],42:[1,23]},{18:24,22:[1,25],23:[1,26],24:[1,27],25:[1,28],26:[1,29]},{6:[2,39],16:[2,39],17:[2,39],22:[2,39],23:[2,39],24:[2,39],25:[2,39],26:[2,39],27:[2,39],33:[2,39],37:[2,39],41:[2,39],42:[2,39]},{1:[2,1]},{5:[2,3],16:[2,3],37:[2,3]},{1:[2,2]},{11:30,13:32,14:31,15:33,16:[1,34],19:18,20:19,37:[1,10],39:20,40:21,41:[1,22],42:[1,23]},{16:[1,39],28:35,29:36,30:37,31:38,38:[1,40]},{15:42,19:18,20:19,33:[1,41],37:[1,10],39:20,40:21,41:[1,22],42:[1,23]},{33:[2,38],37:[2,38],41:[2,38],42:[2,38]},{6:[2,16],16:[2,16],17:[2,16],22:[2,16],23:[2,16],24:[2,16],25:[2,16],26:[2,16],33:[2,16],37:[2,16],41:[2,16],42:[2,16]},{6:[2,17],16:[2,17],17:[2,17],22:[2,17],23:[2,17],24:[2,17],25:[2,17],26:[2,17],33:[2,17],37:[2,17],41:[2,17],42:[2,17]},{6:[2,41],16:[2,41],17:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],33:[2,41],37:[2,41],41:[2,41],42:[2,41]},{6:[2,42],16:[2,42],17:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],33:[2,42],37:[2,42],41:[2,42],42:[2,42]},{6:[2,43],16:[2,43],17:[2,43],22:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],33:[2,43],37:[2,43],41:[2,43],42:[2,43]},{6:[2,44],16:[2,44],17:[2,44],22:[2,44],23:[2,44],24:[2,44],25:[2,44],26:[2,44],33:[2,44],37:[2,44],41:[2,44],42:[2,44]},{17:[1,43]},{16:[2,20],17:[2,20],37:[2,20],41:[2,20],42:[2,20]},{16:[2,21],17:[2,21],37:[2,21],41:[2,21],42:[2,21]},{16:[2,22],17:[2,22],37:[2,22],41:[2,22],42:[2,22]},{16:[2,23],17:[2,23],37:[2,23],41:[2,23],42:[2,23]},{13:44,15:33,16:[1,34],19:18,20:19,37:[1,10],39:20,40:21,41:[1,22],42:[1,23]},{6:[1,45]},{6:[2,11],17:[2,11]},{6:[2,12],12:46,13:48,15:33,16:[1,34],17:[2,12],18:47,19:18,20:19,22:[1,25],23:[1,26],24:[1,27],25:[1,28],26:[1,29],37:[1,10],39:20,40:21,41:[1,22],42:[1,23]},{6:[2,13],16:[2,13],17:[2,13],22:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],37:[2,13],41:[2,13],42:[2,13]},{11:49,13:32,14:31,15:33,16:[1,34],18:50,19:18,20:19,22:[1,25],23:[1,26],24:[1,27],25:[1,28],26:[1,29],37:[1,10],39:20,40:21,41:[1,22],42:[1,23]},{6:[1,51]},{6:[2,27],17:[2,27]},{6:[2,28],17:[2,28],32:[1,52]},{6:[2,29],17:[2,29],32:[2,29]},{16:[1,39],28:53,29:36,30:37,31:38,38:[1,40]},{6:[2,40],17:[2,40],32:[2,40]},{6:[1,56],11:54,13:32,14:31,15:33,16:[1,34],19:18,20:19,35:55,37:[1,10],39:20,40:21,41:[1,22],42:[1,23]},{33:[2,37],37:[2,37],41:[2,37],42:[2,37]},{27:[1,57],37:[2,19],41:[2,19],42:[2,19]},{26:[1,58]},{5:[2,34],16:[2,34],37:[2,34]},{6:[2,32],13:59,15:33,16:[1,34],17:[2,32],19:18,20:19,37:[1,10],39:20,40:21,41:[1,22],42:[1,23]},{11:60,13:32,14:31,15:33,16:[1,34],19:18,20:19,37:[1,10],39:20,40:21,41:[1,22],42:[1,23]},{6:[2,10],16:[2,10],17:[2,10],37:[2,10],41:[2,10],42:[2,10]},{17:[1,61]},{17:[1,62]},{5:[2,25],16:[2,25],37:[2,25]},{16:[1,39],28:63,29:36,30:37,31:38,38:[1,40]},{17:[1,64]},{6:[1,65]},{11:66,13:32,14:31,15:33,16:[1,34],19:18,20:19,37:[1,10],39:20,40:21,41:[1,22],42:[1,23]},{43:[1,67]},{16:[1,39],28:68,29:36,30:37,31:38,38:[1,40]},{16:[2,24],17:[2,24],37:[2,24],41:[2,24],42:[2,24]},{6:[2,9],16:[2,9],17:[2,9],37:[2,9],41:[2,9],42:[2,9]},{6:[2,33],17:[2,33]},{6:[2,14],16:[2,14],17:[2,14],22:[2,14],23:[2,14],24:[2,14],25:[2,14],26:[2,14],37:[2,14],41:[2,14],42:[2,14]},{6:[2,15],16:[2,15],17:[2,15],22:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],37:[2,15],41:[2,15],42:[2,15]},{6:[2,31],17:[2,31]},{6:[2,30],17:[2,30],32:[2,30]},{5:[2,35],16:[2,35],37:[2,35]},{6:[1,70],36:69},{16:[2,45],37:[2,45],41:[2,45],42:[2,45]},{6:[1,71]},{5:[2,36],16:[2,36],37:[2,36]},{44:[1,72]},{5:[2,26],16:[2,26],37:[2,26]},{5:[2,46],16:[2,46],37:[2,46]}],
defaultActions: {11:[2,1],13:[2,2]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}